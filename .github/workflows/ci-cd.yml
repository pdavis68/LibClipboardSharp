name: CI / CD / Releases

# Comprehensive pipeline for LibClipboardSharp
# - CI: matrix build & test on PRs (Windows, Ubuntu, macOS) and on pushes to main
# - CD: pack and push NuGet package on pushes to main (derives version from tag if present)
# - Release: when a tag matching v*.*.* is pushed, build platform-specific publish artifacts,
#            create a GitHub Release, and attach zipped artifacts. Uses CHANGELOG.md for body if present.

on:
  pull_request:
    branches: [ main ]

  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  # Continuous Integration: runs on PRs and on push to main to ensure gate for CD
  ci:
    name: CI - build & test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: |
          dotnet restore

      - name: Build (Release)
        run: |
          dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test --no-build --verbosity normal

      - name: Upload test results (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: |
            **/TestResults || true

  # Continuous Deployment: pack and push NuGet when code is pushed to main
  cd:
    name: CD - pack & push NuGet
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Determine project file
        id: proj
        run: |
          if [ -f "./src/LibClipboardSharp/LibClipboardSharp.csproj" ]; then
            echo "PROJECT=./src/LibClipboardSharp/LibClipboardSharp.csproj" >> $GITHUB_ENV
          elif [ -f "./LibClipboardSharp.csproj" ]; then
            echo "PROJECT=./LibClipboardSharp.csproj" >> $GITHUB_ENV
          else
            echo "Could not find LibClipboardSharp.csproj" >&2
            exit 1
          fi

      - name: Get version from tag (if any)
        id: get_version
        run: |
          VERSION=""
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION_NAME=${GITHUB_REF#refs/tags/}
            # strip leading 'v' from tag (v1.2.3 -> 1.2.3)
            VERSION=${VERSION_NAME#v}
            echo "Found tag: $VERSION_NAME -> using package version: $VERSION"
          else
            echo "No tag on this push; pack will use project version metadata if present."
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Pack NuGet package
        run: |
          mkdir -p artifacts
          if [ -n "${VERSION}" ]; then
            dotnet pack "$PROJECT" --configuration Release -o artifacts /p:PackageVersion=${VERSION}
          else
            dotnet pack "$PROJECT" --configuration Release -o artifacts
          fi

      - name: List created packages
        run: ls -la artifacts || true

      - name: Push package to nuget.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if compgen -G "artifacts/*.nupkg" > /dev/null; then
            dotnet nuget push artifacts/*.nupkg -k "$NUGET_API_KEY" -s https://api.nuget.org/v3/index.json --skip-duplicate
          else
            echo "No packages found to push." && exit 1
          fi

  # Build platform-specific publish artifacts for a release tag. Produces zips uploaded as workflow artifacts.
  build_artifacts:
    name: Build publish artifacts
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: windows-latest
            rid: win-x86
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/win-x86/publish
          - runner: windows-latest
            rid: win-x64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/win-x64/publish
          - runner: windows-latest
            rid: win-arm64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/win-arm64/publish
          - runner: ubuntu-latest
            rid: linux-x64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/linux-x64/publish
          - runner: ubuntu-latest
            rid: linux-arm64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/linux-arm64/publish
          - runner: macos-latest
            rid: osx-x64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/osx-x64/publish
          - runner: macos-latest
            rid: osx-arm64
            publish_dir: ./src/LibClipboardSharp/bin/Release/net6.0/osx-arm64/publish

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Determine project file
        run: |
          if [ -f "./src/LibClipboardSharp/LibClipboardSharp.csproj" ]; then
            echo "PROJECT=./src/LibClipboardSharp/LibClipboardSharp.csproj" >> $GITHUB_ENV
          elif [ -f "./LibClipboardSharp.csproj" ]; then
            echo "PROJECT=./LibClipboardSharp.csproj" >> $GITHUB_ENV
          else
            echo "Could not find LibClipboardSharp.csproj" >&2
            exit 1
          fi

      - name: Publish for RID ${{ matrix.rid }}
        run: |
          set -euo pipefail
          echo "Publishing RID=${{ matrix.rid }} to output ${{ matrix.publish_dir }}"
          mkdir -p "$(dirname "${{ matrix.publish_dir }}")"
          dotnet publish "$PROJECT" -c Release -r ${{ matrix.rid }} --self-contained false -f net6.0 -o "${{ matrix.publish_dir }}"

      - name: Prepare zip artifact
        run: |
          mkdir -p ./artifacts
          ZIP_PATH=./artifacts/${{ matrix.rid }}.zip
          if [[ "${{ runner.os }}" == "Windows" || "${{ matrix.runner }}" == "windows-latest" ]]; then
            powershell -Command "if (Test-Path '${{ matrix.publish_dir }}') { Compress-Archive -Path '${{ matrix.publish_dir }}\\*' -DestinationPath '${ZIP_PATH}' -Force } else { Write-Error 'Publish dir not found' ; exit 1 }"
          else
            if [ -d "${{ matrix.publish_dir }}" ]; then
              (cd "${{ matrix.publish_dir }}" && zip -r "${ZIP_PATH}" .)
            else
              echo "Publish dir not found: ${{ matrix.publish_dir }}" && exit 1
            fi
          fi

      - name: Upload zip as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: publish-${{ matrix.rid }}
          path: ./artifacts/${{ matrix.rid }}.zip

  # Create GitHub Release and attach artifacts when a release tag is pushed
  create_release:
    name: Create Release and attach artifacts
    runs-on: ubuntu-latest
    needs: build_artifacts
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded_artifacts
      - name: Prepare release notes (CHANGELOG.md or fallback)
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            RELEASE_BODY=$(cat CHANGELOG.md)
          else
            RELEASE_BODY="Release $GITHUB_REF_NAME"
          fi
          if [[ "${GITHUB_REF#refs/tags/}" == *"-"* ]]; then
            PRERELEASE=true
          else
            PRERELEASE=false
          fi
          # Use GITHUB_OUTPUT to expose outputs for other steps
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.body }}
          draft: false
          prerelease: ${{ steps.release_notes.outputs.prerelease }}

      - name: Create combined artifacts zip
        run: |
          cd downloaded_artifacts
          zip -r ../all-artifacts.zip .
          cd ..

      - name: Upload combined artifacts to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./all-artifacts.zip
          asset_name: all-artifacts.zip
          asset_content_type: application/zip
